(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{229:function(t,v,_){t.exports=_.p+"assets/img/proto.5e18c31b.png"},266:function(t,v,_){"use strict";_.r(v);var e=_(0),s=Object(e.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"原型以及原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型以及原型链"}},[t._v("#")]),t._v(" 原型以及原型链")]),t._v(" "),e("h3",{attrs:{id:"原型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),e("p",[t._v("本质是一个js对象(除了"),e("code",[t._v("null")]),t._v(")，当我们通过"),e("strong",[t._v("构造函数")]),t._v("创建"),e("strong",[t._v("实例")]),t._v("的时候，构造函数的其中一个属性"),e("code",[t._v("prototype")]),t._v("指向"),e("strong",[t._v("原型")]),t._v("，"),e("strong",[t._v("实例")]),t._v("的"),e("code",[t._v("_proto_")]),t._v("指向"),e("strong",[t._v("原型")])]),t._v(" "),e("p",[t._v("实例对象与原型对象之间通过"),e("code",[t._v("_proto_")]),t._v("来关联起来，当实例的属性找不到的时候会通过"),e("code",[t._v("_proto")]),t._v("继续往上层原型对象查找，直到找到"),e("code",[t._v("Object.prototype")]),t._v("为止")]),t._v(" "),e("p",[t._v("用于创建出来的实例共享属性以及方法")]),t._v(" "),e("h3",{attrs:{id:"原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),e("p",[e("strong",[t._v("原型链")]),t._v("是通过实例的"),e("code",[t._v("_proto")]),t._v("属性，查找原型对象，如果找不到，会往上查找。这样成为一个原型链，一般是用于继承")]),t._v(" "),e("p",[t._v("关于Function__proto__===Function.prototype的问题")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/jawil/blog/issues/13",target:"_blank",rel:"noopener noreferrer"}},[t._v("从探究Function."),e("strong",[t._v("proto")]),t._v("===Function.prototype过程中的一些收获"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("img",{attrs:{src:_(229),alt:"原型图"}})]),t._v(" "),e("h2",{attrs:{id:"作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),e("p",[t._v("js是"),e("strong",[t._v("词法作用域")]),t._v("，也就是"),e("strong",[t._v("静态作用域")])]),t._v(" "),e("p",[e("strong",[t._v("静态作用域")]),t._v("是，函数作用域在**(函数定义)**的时候就决定了 (该作用域是父级创建的所以作用域链)")]),t._v(" "),e("p",[e("strong",[t._v("动态作用域")]),t._v("是，函数作用域在"),e("strong",[t._v("函数调用")]),t._v("的时候才决定的。")]),t._v(" "),e("h3",{attrs:{id:"个人理解作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#个人理解作用域"}},[t._v("#")]),t._v(" 个人理解作用域")]),t._v(" "),e("p",[t._v("作用域有两种")]),t._v(" "),e("p",[t._v("一种是函数创建的时候，会有个"),e("strong",[t._v("静态作用域")]),t._v("，静态作用域是指将父级或父级以上的作用域的所有变量对象，可以理解成一个"),e("strong",[t._v("父级的作用域链")])]),t._v(" "),e("p",[t._v("第二种，就是函数执行的时候，会创建一个执行上下文，也就是会创建一个作用域，是函数独有的作用域，两者加起来就是该函数整体的作用域")]),t._v(" "),e("h2",{attrs:{id:"执行上下文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),e("p",[t._v("js引擎执行代码时会创建执行环境（执行上下文）")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("创建全局函数")])]),t._v(" "),e("li",[e("p",[t._v("函数执行")])]),t._v(" "),e("li",[e("p",[t._v("eval方法调用")])])]),t._v(" "),e("h3",{attrs:{id:"生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),e("p",[t._v("创建阶段\n在这个阶段中，执行上下文会分别创建变量对象，建立作用域链，以及确定this的指向。")]),t._v(" "),e("p",[t._v("代码执行阶段\n创建完成之后，就会开始执行代码，这个时候，会完成变量赋值，函数引用，以及执行其他代码")]),t._v(" "),e("h3",{attrs:{id:"执行上下文都会包含三个重要属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文都会包含三个重要属性"}},[t._v("#")]),t._v(" "),e("strong",[t._v("执行上下文都会包含三个重要属性")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("变量对象（variable Object VO）")])]),t._v(" "),e("li",[e("p",[t._v("作用域链（scoped chain）")])]),t._v(" "),e("li",[e("p",[t._v("this")])])]),t._v(" "),e("h4",{attrs:{id:"变量对象-vo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量对象-vo"}},[t._v("#")]),t._v(" 变量对象(VO)")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("函数的所有形参（如果是函数上下文）")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("由"),e("strong",[t._v("名称和对应值")]),t._v("组成的一个变量对象的属性被创建")])]),t._v(" "),e("li",[e("p",[t._v("没有实参，为undefined")])])])]),t._v(" "),e("li",[e("p",[t._v("函数声明")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("由"),e("strong",[t._v("名称和对应值")]),t._v("（函数对象(function-object)）组成一个变量对象的属性被创建")])]),t._v(" "),e("li",[e("p",[t._v("如果变量对象已经存在相同名称的属性，则"),e("strong",[t._v("完全替换")]),t._v("这个属性")])])])]),t._v(" "),e("li",[e("p",[t._v("变量声明")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("由"),e("strong",[t._v("名称和对应值")]),t._v("（undefined）组成一个变量对象的属性被创建；")])]),t._v(" "),e("li",[e("p",[t._v("如果变量名称跟已经声明的形式参数或函数相同，则变量声明"),e("strong",[t._v("不会干扰")]),t._v("已经存在的这类属性")])])])])]),t._v(" "),e("h5",{attrs:{id:"变量对象（vo）与活动对象（ao）区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量对象（vo）与活动对象（ao）区别"}},[t._v("#")]),t._v(" 变量对象（VO）与活动对象（AO）区别")]),t._v(" "),e("p",[t._v("当每次执行上下文之前，会保存上下文定义的属性以及函数声明, 该阶段是不可访问")]),t._v(" "),e("p",[t._v("但执行阶段之后，变量对象（VO）会转成 活动对象（AO）,里面的属性可以访问")]),t._v(" "),e("p",[t._v("本质上都是同一个对象，区别在于运行不同的对象周期")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/6",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript深入之作用域链 "),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("总结")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("全局上下文的"),e("strong",[t._v("变量对象")]),t._v("初始化是全局对象 (window)")])]),t._v(" "),e("li",[e("p",[t._v("函数上下文的"),e("strong",[t._v("变量对象")]),t._v("初始化只包括 Arguments 对象")])]),t._v(" "),e("li",[e("p",[t._v("在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值")])]),t._v(" "),e("li",[e("p",[t._v("在代码执行阶段，会再次修改变量对象的属性值")])])])]),t._v(" "),e("h2",{attrs:{id:"this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),e("h3",{attrs:{id:"从ecmascript规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从ecmascript规范"}},[t._v("#")]),t._v(" 从ECMAScript规范")]),t._v(" "),e("p",[t._v("判断this")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("计算 "),e("code",[t._v("MemberExpression")]),t._v(" 的结果赋值给 "),e("code",[t._v("ref")]),t._v(" "),e("code",[t._v("MemberExpression")]),t._v(" 左边表达式")])]),t._v(" "),e("li",[e("p",[t._v("判断 "),e("code",[t._v("ref")]),t._v(" 是不是一个 "),e("code",[t._v("Reference")]),t._v(" 类型。")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("2.1 如果 ref 是 Reference，并且 IsPropertyReference(ref) 是 true, 那么 this 的值为 GetBase(ref)\n\n2.2 如果 ref 是 Reference，并且 base value 值是 Environment Record, 那么this的值为 ImplicitThisValue(ref)\n\n2.3 如果 ref 不是 Reference，那么 this 的值为 undefined\n")])])]),e("p",[t._v("由于不是严格模式，this如果是undefined，会指向全局对象window")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/7",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript深入之从ECMAScript规范解读this"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"常规理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常规理解"}},[t._v("#")]),t._v(" 常规理解")]),t._v(" "),e("p",[t._v("this就是最后调用他的函数，")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("直接调用 window （window 绑定）")])]),t._v(" "),e("li",[e("p",[t._v("对象调用指向对象 （隐式绑定）")])]),t._v(" "),e("li",[e("p",[t._v("new 调用指向实例 （new 绑定）")])]),t._v(" "),e("li",[e("p",[t._v("可以通过call， apply, bind改变（显式绑定）")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 查看函数在哪被调用。\n2. 左侧有没有对象？如果有，它就是 “this” 的引用。如果没有，继续第 3 步。\n3. 该函数是不是用 “call”、“apply” 或者 “bind” 调用的？如果是，它会显式地指明 “this” 的引用。如果不是，继续第 4 步。\n4. 该函数是不是用 “new” 调用的？如果是，“this” 指向的就是 JavaScript 解释器新创建的对象。如果不是，继续第 5 步。\n5. 是否在“严格模式”下？如果是，“this” 就是 undefined，如果不是，继续第 6 步。\n6. JavaScript 很奇怪，“this” 会指向 “window” 对象。\n")])])]),e("h2",{attrs:{id:"闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),e("p",[t._v("指那些能够访问自由变量的函数")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("创建它的执行上下文被销毁了，但它仍然存在（比如内部函数从父函数返回过来）")])]),t._v(" "),e("li",[e("p",[t._v("在代码中引用了自由变量")])])]),t._v(" "),e("p",[t._v("因为闭包能访问以及销毁它但执行上下文访问到变量。而这个变量是无法被销毁的，存储在内存中。\n"),t._v("\n\x3c!-- ```\nfunction aaa () {\nwindow.a = function () {\naaa\n}\n}")]),t._v(" "),e("div",{staticClass:"language---\x3e extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n## 参数按值传递\n\n参数传递都是按值来传递的，但是js中有分``基本类型和引用类型``，所说的值传递是指栈中的值拷贝\n\n基本类型是存储在栈内存中，但引用类型是将地址存在栈内存中，而数据存在堆内存中")])])])])}),[],!1,null,null,null);v.default=s.exports}}]);