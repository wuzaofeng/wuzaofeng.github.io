(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{238:function(e,t,n){e.exports=n.p+"assets/img/r1.38ad6ee9.jpg"},239:function(e,t,n){e.exports=n.p+"assets/img/r2.42ce8224.jpg"},240:function(e,t,n){e.exports=n.p+"assets/img/r3.5dd4938a.jpg"},241:function(e,t,n){e.exports=n.p+"assets/img/r4.d0a9ffae.jpg"},278:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"耗时一年整理，全网最全的typescript踩坑集锦（react-ts-项目问题）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#耗时一年整理，全网最全的typescript踩坑集锦（react-ts-项目问题）"}},[e._v("#")]),e._v(" 耗时一年整理，全网最全的TypeScript踩坑集锦（React + TS 项目问题）")]),e._v(" "),a("h2",{attrs:{id:"_1-使用-import-引入非-js-模块会报错，而使用-require-则没有问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用-import-引入非-js-模块会报错，而使用-require-则没有问题"}},[e._v("#")]),e._v(" 1. 使用 import 引入非 JS 模块会报错，而使用 require 则没有问题")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import styles from './login.less';\nimport logo from '@assets/images/logo.svg';\n\nconst logo2 = require('@assets/images/logo.svg');\nconsole.log(logo2);// path\n")])])]),a("p",[a("img",{attrs:{src:n(238),alt:"r1"}})]),e._v(" "),a("p",[a("strong",[e._v("解决办法：")]),e._v(" 给这些非 JS 模块添加申明")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/**\n * style\n */\ndeclare module '*.css'\ndeclare module '*.less'\n// declare module \"*.less\" {\n//     const styles: { [className: string]: string };\n//     export default styles\n// }\ndeclare module '*.scss'\n\n\n/**\n * 图片\n */\ndeclare module '*.svg'\ndeclare module '*.png'\ndeclare module '*.jpg'\ndeclare module '*.jpeg'\ndeclare module '*.gif'\ndeclare module '*.bmp'\n")])])]),a("h2",{attrs:{id:"_2-import-as-react-from-react-和-import-react-from-react-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-import-as-react-from-react-和-import-react-from-react-有什么区别"}},[e._v("#")]),e._v(" 2. import * as React from 'react' 和 import React from 'react' 有什么区别")]),e._v(" "),a("ul",[a("li",[e._v("第一种写法是将"),a("strong",[e._v("所有用 export 导出")]),e._v("的成员赋值给 React ，导入后用 React.xxx 访问")]),e._v(" "),a("li",[e._v("第二种写法仅是将默认导出（"),a("strong",[e._v("export default")]),e._v("）的内容赋值给 React")])]),e._v(" "),a("h2",{attrs:{id:"_3-react-redux-react-redux-项目：使用-connect-装饰器正常，但是一旦结合-ts-后，就会报错"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-redux-react-redux-项目：使用-connect-装饰器正常，但是一旦结合-ts-后，就会报错"}},[e._v("#")]),e._v(" 3. react + redux + react-redux 项目：使用 @connect 装饰器正常，但是一旦结合 TS 后，就会报错")]),e._v(" "),a("p",[e._v("https://segmentfault.com/a/1190000016047027")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import {ComponentClass} from 'react'\nimport {\n    connect as nativeConnect,\n    MapDispatchToPropsParam,\n    MapStateToPropsParam\n} from 'react-redux'\nimport {withRouter as nativeWithRouter} from 'react-router-dom'\n\nexport type ComponentDecorator<P = any> = <T extends ComponentClass<P>>(WrappedComponent: T) => T\n\nexport const connect: <P, S>(\n    mapState: MapStateToPropsParam<Partial<P>, P, S>,\n // mapDispatch?: MapDispatchToPropsParam<Partial<P>, P>\n    mapDispatch?: any\n) => ComponentDecorator = nativeConnect as any;\n\nexport const withRouter: ComponentDecorator = nativeWithRouter as any;\n")])])]),a("h2",{attrs:{id:"_4-react-redux-react-redux-项目：在使用-mapstatetoprops-state-函数时，想要给仓库中的-state-声明类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-react-redux-react-redux-项目：在使用-mapstatetoprops-state-函数时，想要给仓库中的-state-声明类型"}},[e._v("#")]),e._v(" 4. react + redux + react-redux 项目：在使用 mapStateToProps(state) 函数时，想要给仓库中的 state 声明类型")]),e._v(" "),a("ul",[a("li",[e._v("借助 ReturnType")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// rootReducer.ts\nimport {combineReducers} from 'redux';\nimport {connectRouter} from 'connected-react-router';\nimport history from '../history';\nimport evidenceEdit from './evidence';\nimport common from './common';\nimport work from './work';\nimport setScene from './set-scene';\n\nlet reducers = {\n    common,\n    work,\n    setScene,\n    evidenceEdit,\n    router: connectRouter(history)\n};\n\n// 使用 ReturnType 从 rootReducer 推断状态形状\n// export type AppState = ReturnType<typeof rootReducer>\nexport type AppState = {\n    [key in keyof typeof reducers]: ReturnType<typeof reducers[key]>\n}\n\nconst rootReducer = combineReducers(reducers);\n\nexport default rootReducer;\n// setScene 模块\nimport * as types from '../types/action-types';\nimport {appEditAction} from '../actions/common';\n\nexport interface SetSceneState {\n    loadSuccess: boolean;\n    loadProgress: number;\n}\n\nlet initState: SetSceneState = {\n    loadSuccess: false,\n    loadProgress: 0,\n};\nexport default function (state: SetSceneState = initState, action: appEditAction) {\n    switch (action.type) {\n\n        case types.SCENE_DATA_LOADSUCCESS: {\n            return {...state, loadSuccess: action.payload.success};\n        }\n        case types.SCENE_DATA_LOADINGPROGRESS: {\n            return {...state, loadProgress: action.payload.num};\n        }\n        default:\n            return state;\n    }\n}\n")])])]),a("p",[e._v("使用\n"),a("img",{attrs:{src:n(239),alt:"r2"}})]),e._v(" "),a("h2",{attrs:{id:"_5-react-redux-react-redux-项目：想要给-action-creator-函数声明类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-react-redux-react-redux-项目：想要给-action-creator-函数声明类型"}},[e._v("#")]),e._v(" 5. react + redux + react-redux 项目：想要给 action creator 函数声明类型")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 在 Mesh 组件中\nimport workActions from "@store/actions/work";\n\ninterface MeshProps {\n    // 刚开始我是这样写的，每次都得在组件的 Props 里重新声明一下函数\n    // updateSceneData?: (workId: string,data) => appEditAction;\n    updateData?: typeof workActions.updateData;\n}\n\n@connect(null, {\n    updateData: workActions.updateData,\n})\nclass Mesh extends React.Component<MeshProps> {...}\n// store/actions/work.ts\n\nimport * as types from \'../types/action-types\';\nimport {appEditAction} from "@edit-store/actions/common";\n\nexport default {\n    updateWorkData(workId: string, data: any): appEditAction {\n        return {type: types.UPDATE_WORK_ASYNC, payload: {workId, data}}\n    }\n}\n')])])]),a("h2",{attrs:{id:"_6-react-redux-react-redux-项目：给-react-组件的-props-声明类型（较为便捷的方法）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-react-redux-react-redux-项目：给-react-组件的-props-声明类型（较为便捷的方法）"}},[e._v("#")]),e._v(" 6.  react + redux + react-redux 项目：给 React 组件的 Props 声明类型（较为便捷的方法）")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import * as React from \'react\';\nimport {RouteComponentProps} from \'react-router\';\nimport {connect} from "@store/connect";\nimport {AppState} from "@store/reducers";\nimport commonActions from "@store/actions/commonActions";\n\n// 组件可能有四个属性来源\n// 1.mapStateToProps 的返回值\n// 2.actions 对象类型\n// 3.来自路由\n// 4.父组件传进来的其它属性\n\n// 原先的写法：一个个拼起来，mapStateToProps 返回的状态还得在 Props 接口里再声明一遍，比较混乱、麻烦\n// interface Props {\n//     loadProgress?: number;\n//     markVisible?: boolean;\n//     setMarkVisible?: typeof commonActions.setMarkVisible;\n// }\n\nfunction mapStateToProps(state: AppState) {\n    const {markVisible,loadProgress} = state;\n    return {\n        markVisible,\n        loadProgress,\n    };\n}\n\n// 现在的写法：便捷\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof commonActions;\ninterface IParams {}\ntype RouteProps = RouteComponentProps<IParams>;\ntype Props = StateProps & RouteProps & DispatchProps & {};\n\n@connect(mapStateToProps, {\n    setMarkVisible: commonActions.setMarkVisible\n})\nexport default class App extends React.PureComponent<Props, any> {\n    render() {\n        const {markVisible, loadProgress} = this.props;\n        return (<div > {markVisible} {loadProgress} </div>);\n    }\n}\n\n')])])]),a("h2",{attrs:{id:"_6-react-redux-react-redux-项目：想要给-redux-thunk-声明类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-react-redux-react-redux-项目：想要给-redux-thunk-声明类型"}},[e._v("#")]),e._v(" 6. react + redux + react-redux 项目：想要给 redux-thunk 声明类型")]),e._v(" "),a("p",[e._v("redux thunk 有一个内置类型 "),a("code",[e._v("ThunkAction")]),e._v("，我们可以这样使用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// src/thunks.ts\n\nimport { Action } from 'redux'\nimport { sendMessage } from './store/chat/actions'\nimport { AppState } from './store'\nimport { ThunkAction } from 'redux-thunk'\n\nexport const thunkSendMessage = (\n  message: string\n): ThunkAction<void, AppState, null, Action<string>> => async dispatch => {\n  const asyncResp = await exampleAPI()\n  dispatch(\n    sendMessage({\n      message,\n      user: asyncResp,\n      timestamp: new Date().getTime()\n    })\n  )\n}\n\nfunction exampleAPI() {\n  return Promise.resolve('Async')\n}\n")])])]),a("h2",{attrs:{id:"_7-使用-webpack-的-module-hot-会警告没有类型定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-使用-webpack-的-module-hot-会警告没有类型定义"}},[e._v("#")]),e._v(" 7. 使用 webpack 的 module.hot 会警告没有类型定义")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 下载这个类型声明文件\n$ npm install --save @types/webpack-env\nif (process.env.NODE_ENV !== 'production') {\n    if (module.hot) {\n        module.hot.accept('./reducers', () => store.replaceReducer(rootReducer));\n    }\n}\n")])])]),a("h2",{attrs:{id:"_8-tsconfig-paths-webpack-plugin-这个包会将-tsconfig-json-中的-path-配置项内容映射到-webpack-配置中去，这样就不需要在-webpack-中的-alias-配置项里配置路径映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-tsconfig-paths-webpack-plugin-这个包会将-tsconfig-json-中的-path-配置项内容映射到-webpack-配置中去，这样就不需要在-webpack-中的-alias-配置项里配置路径映射"}},[e._v("#")]),e._v(" 8. tsconfig-paths-webpack-plugin 这个包会将 tsconfig.json 中的 path 配置项内容映射到 webpack 配置中去，这样就不需要在 webpack 中的 alias 配置项里配置路径映射")]),e._v(" "),a("p",[a("img",{attrs:{src:n(240),alt:"r3"}})]),e._v(" "),a("h2",{attrs:{id:"_9-react-函数组件声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-react-函数组件声明"}},[e._v("#")]),e._v(" 9. react 函数组件声明")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("interface Greeting {\n    name: string;\n    age: number;\n}\n\nconst Hello:React.FC<Greeting> = (props) => <h1>Hello {props.name}</h1>;\n\n// 推荐使用第二种\nconst Hello2 = (props:Greeting) => <h1>Hello {props.name}</h1>;\n")])])]),a("h2",{attrs:{id:"_10-如何编写-react-ts-版的-hoc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何编写-react-ts-版的-hoc"}},[e._v("#")]),e._v(" 10. 如何编写 react + ts 版的 HOC")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import React, { Component } from 'react';\n\nimport HelloClass from './HelloClass';\n\ninterface Loading {\n    loading: boolean\n}\n\n// HOC 可以接收一个类组件，也可以接收一个函数组件，所以参数的类型是 React.ComponentType\n// 源码：type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\nfunction HelloHOC<P>(WrappedComponent: React.ComponentType<P>) {\n    return class extends Component<P & Loading> {\n        render() {\n            const { loading, ...props } = this.props;\n            return loading ? <div>Loading...</div> : <WrappedComponent { ...props as P } />;\n        }\n    }\n}\n\nexport default HelloHOC(HelloClass);\n")])])]),a("h2",{attrs:{id:"_11-快速获取事件处理函数的-event-参数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-快速获取事件处理函数的-event-参数类型"}},[e._v("#")]),e._v(" 11. 快速获取事件处理函数的 event 参数类型")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" class Login extends React.Component <Props>{\n\n    handlerLinkBtnClick = (ev) => {\n          console.log(ev);\n        this.props.historyGo('./register');\n    };\n\n    handlerLinkBtnMouseMove = (ev) => {\n       console.log(ev);\n    };\n\n    render() {\n        return (\n            <div>\n                <header>\n                    <p >This is Login Page </p>\n                    <div className={styles.linkBtn}\n                         onMouseMove={this.handlerLinkBtnMouseMove} \n                         onClick={this.handlerLinkBtnClick}>\n                         Go to Register Page\n                   </div>\n                </header>\n            </div>\n        );\n    }\n}\n")])])]),a("p",[e._v("按住 Ctrl ，然后鼠标移动到事件名上就能获取当前事件处理函数的参数类型\n"),a("img",{attrs:{src:n(241),alt:"r4"}})]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("涉及链接")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.tslang.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("typescript中文版"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);