(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{276:function(t,s,a){"use strict";a.r(s);var r=a(0),n=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"重学es6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重学es6"}},[t._v("#")]),t._v(" 重学es6")]),t._v(" "),a("h2",{attrs:{id:"循环中的-let-和-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环中的-let-和-const"}},[t._v("#")]),t._v(" 循环中的 let 和 const")]),t._v(" "),a("h3",{attrs:{id:"let-const特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-const特点"}},[t._v("#")]),t._v(" let, const特点")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("不会变量提升")])]),t._v(" "),a("li",[a("p",[t._v("不能重复定义变量")])]),t._v(" "),a("li",[a("p",[t._v("不能绑定在全局作用域，而是挂在在暂时死区（TDZ）")])])]),t._v(" "),a("h3",{attrs:{id:"块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域"}},[t._v("#")]),t._v(" 块级作用域")]),t._v(" "),a("p",[t._v("ES5 规定，函数只能在"),a("strong",[t._v("顶层作用域和函数作用域")]),t._v("之中声明，不能在"),a("strong",[t._v("块级作用域声明")])]),t._v(" "),a("p",[t._v("ES6")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("允许在块级作用域内声明函数")])]),t._v(" "),a("li",[a("p",[t._v("函数声明类似于var，即会提升到全局作用域或函数作用域的头部")])]),t._v(" "),a("li",[a("p",[t._v("同时，函数声明还会提升到所在的块级作用域的头部")])])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("for循环，通过let声明，会生成一个块级作用域，每次迭代循环时都"),a("strong",[t._v("创建一个新变量")]),t._v("，并且会"),a("strong",[t._v("修改")]),t._v("循环迭代之前同名的变量， const声明为报错，因为是const声明是常量，不能被修改")])]),t._v(" "),a("li",[a("p",[t._v("for in遍历对象, let声明，const声明是可以通过，因为不会修改之前的\n同名变量")])])]),t._v(" "),a("h2",{attrs:{id:"解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值"}},[t._v("#")]),t._v(" 解构赋值")]),t._v(" "),a("p",[t._v("解构赋值可以解构"),a("strong",[t._v("数组，对象，数字，字符串，函数参数")]),t._v("， 但不能解构"),a("code",[t._v("undefined")]),t._v(", "),a("code",[t._v("null")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("解构赋值优先使用"),a("strong",[t._v("判断右边有没有值")]),t._v("，"),a("strong",[t._v("没有值才取默认值")])])]),t._v(" "),a("li",[a("p",[t._v("如果右边是"),a("code",[t._v("undefined")]),t._v("，会取默认值，但"),a("code",[t._v("null")]),t._v("不会")])]),t._v(" "),a("li",[a("p",[t._v("如果要将已经声明的变量解构赋值，需要加"),a("strong",[t._v("圆括号")])])]),t._v(" "),a("li",[a("p",[t._v("数字，字符串解构会先传成包装对象")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误的写法, 因为Javascript引擎会将{x}理解成一个代码块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError: syntax error")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确的写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("交换变量")]),t._v("的值")])]),t._v(" "),a("li",[a("p",[t._v("从"),a("strong",[t._v("函数返回")]),t._v("直接获取多个值")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("函数参数的定义")]),t._v("直接获取值")])]),t._v(" "),a("li",[a("p",[t._v("快速提取"),a("strong",[t._v("对象，数组")]),t._v("数据")])]),t._v(" "),a("li",[a("p",[t._v("函数参数"),a("strong",[t._v("设置默认值")])])])]),t._v(" "),a("h2",{attrs:{id:"字符串的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的扩展"}},[t._v("#")]),t._v(" 字符串的扩展")]),t._v(" "),a("p",[t._v("加强对字符的"),a("code",[t._v("Unicode")]),t._v("的支持")]),t._v(" "),a("h2",{attrs:{id:"原始symbol，表示独一无二的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始symbol，表示独一无二的值"}},[t._v("#")]),t._v(" 原始Symbol，表示独一无二的值")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Symbol 函数创建， 不能通过new创建")])]),t._v(" "),a("li",[a("p",[t._v("instanceof 结果是false")])]),t._v(" "),a("li",[a("p",[t._v("Symbol 不能与其他类型运算")])]),t._v(" "),a("li",[a("p",[t._v("Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回. 可以用Object.getOwnPropertySymbols方法调用")])])]),t._v(" "),a("p",[t._v("用途，挂在全局对象做单例模式")]),t._v(" "),a("h2",{attrs:{id:"for-of-循环（实际上就是调用symbol-iterator）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-of-循环（实际上就是调用symbol-iterator）"}},[t._v("#")]),t._v(" for...of 循环（实际上就是调用Symbol.iterator）")]),t._v(" "),a("ol",[a("li",[t._v("数组")]),t._v(" "),a("li",[t._v("Set")]),t._v(" "),a("li",[t._v("Map")]),t._v(" "),a("li",[t._v("类数组对象，如 arguments 对象、DOM NodeList 对象")]),t._v(" "),a("li",[t._v("Generator 对象")]),t._v(" "),a("li",[t._v("字符串")])]),t._v(" "),a("h2",{attrs:{id:"promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),a("h3",{attrs:{id:"回调地狱的坏处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调地狱的坏处"}},[t._v("#")]),t._v(" 回调地狱的坏处")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("可读性差，通过函数嵌套函数")])]),t._v(" "),a("li",[a("p",[t._v("难以复用")])]),t._v(" "),a("li",[a("p",[t._v("借助外层的变量")])]),t._v(" "),a("li",[a("p",[t._v("有时候同步执行，异步函数无法区分开来")])])]),t._v(" "),a("h3",{attrs:{id:"promise-的局限性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-的局限性"}},[t._v("#")]),t._v(" Promise 的局限性")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("错误被吃掉，Promise 内部的错误不会影响到 Promise 外部的代码, p")])]),t._v(" "),a("li",[a("p",[t._v("resolve, reject只能传递单一值")])]),t._v(" "),a("li",[a("p",[t._v("无法取消")])]),t._v(" "),a("li",[a("p",[t._v("无法知道pending状态")])])]),t._v(" "),a("h4",{attrs:{id:"promise-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-all"}},[t._v("#")]),t._v(" "),a("code",[t._v("Promise.all()")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("只有都请求成功，那么才返回成功")])]),t._v(" "),a("li",[a("p",[t._v("如果有一个是请求失败，那么就失败,会到catch")])])]),t._v(" "),a("p",[t._v("注意：如果Promise实例，自己有catch那么会先调用catch，然后如果没有reject, 那么会到Promise.all.then方法")]),t._v(" "),a("h5",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),a("p",[t._v("无法确定所有请求都结束")]),t._v(" "),a("h4",{attrs:{id:"promise-race"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-race"}},[t._v("#")]),t._v(" "),a("code",[t._v("Promise.race()")])]),t._v(" "),a("p",[t._v("实例中，根据最先返回的值改变状态，最先成功就成功，失败就失败")]),t._v(" "),a("h4",{attrs:{id:"promise-any-（第三阶段的提案）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-any-（第三阶段的提案）"}},[t._v("#")]),t._v(" "),a("code",[t._v("Promise.any()")]),t._v("（第三阶段的提案）")]),t._v(" "),a("p",[t._v("只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例就会变成rejected状态")]),t._v(" "),a("h4",{attrs:{id:"promise-allsettled"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-allsettled"}},[t._v("#")]),t._v(" "),a("code",[t._v("Promise.allSettled()")])]),t._v(" "),a("p",[t._v("必须等待实例全部返回结果才结束，只要有个成功，就进到then")]),t._v(" "),a("h5",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),a("p",[t._v("不关心异步操作的结果，只关心这些操作有没有结束")]),t._v(" "),a("h4",{attrs:{id:"promise-try"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-try"}},[t._v("#")]),t._v(" "),a("code",[t._v("Promise.try()")])]),t._v(" "),a("p",[t._v("让同步函数同步执行，异步函数异步执行")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'now'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'next'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// async () => f()会吃掉f()抛出的错误")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"iterator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator"}},[t._v("#")]),t._v(" Iterator")]),t._v(" "),a("p",[t._v("Iterator接口的目的，就是为所有数据结构，提供了一种统一的访问机制,即"),a("code",[t._v("for...of")]),t._v("循环")]),t._v(" "),a("h3",{attrs:{id:"场合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场合"}},[t._v("#")]),t._v(" 场合")]),t._v(" "),a("p",[t._v("1.使用"),a("code",[t._v("for of")]),t._v("循环数据")]),t._v(" "),a("p",[t._v("数组, 类数组对象, map, set")]),t._v(" "),a("p",[t._v("2.解构赋值")]),t._v(" "),a("p",[t._v("对数组和 Set 结构进行解构赋值时，会默认调用"),a("code",[t._v("Symbol.iterator")]),t._v("方法")]),t._v(" "),a("p",[t._v("3.扩展运算符")]),t._v(" "),a("p",[t._v("4.yield*")])])}),[],!1,null,null,null);s.default=n.exports}}]);