(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{273:function(t,n,e){"use strict";e.r(n);var a=e(0),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"模拟实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模拟实现"}},[t._v("#")]),t._v(" 模拟实现")]),t._v(" "),e("h2",{attrs:{id:"call模拟实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call模拟实现"}},[t._v("#")]),t._v(" call模拟实现")]),t._v(" "),e("p",[e("strong",[t._v("思路")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("自定义该对象一个属性，值为该执行的函数， this可以获取到需要调用到函数")])]),t._v(" "),e("li",[e("p",[t._v("执行函数， 传入参数(...args), 获取返回值")])]),t._v(" "),e("li",[e("p",[t._v("删除函数")])]),t._v(" "),e("li",[e("p",[t._v("返回值")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Function.prototype.call2 = function (context, ...args) {\n  var context = context || window\n  // this 指的是调用它函数\n  context.fn = this\n  var result = context.fn(...args)\n  delete context.fn\n  return result\n}\n")])])]),e("h2",{attrs:{id:"apply-模拟实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apply-模拟实现"}},[t._v("#")]),t._v(" apply 模拟实现")]),t._v(" "),e("p",[t._v("实现和call一样。只是传入参数传入是数组的形式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Function.prototype.apply2 = function (context, arr) {\n  var context = context || window\n  // this 指的是调用它函数\n  context.fn = this\n  var result = context.fn(...arr)\n  delete context.fn\n  return result\n}\n")])])]),e("h2",{attrs:{id:"bind-模拟实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind-模拟实现"}},[t._v("#")]),t._v(" bind 模拟实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Function.prototype.bind = function (context, ...arr) {\n  if (typeof this !== "function") {\n    throw new Error("Function.prototype.bind - what is trying to be bound is not callable");\n  }\n  const _self = this // bar\n  const fBound = function (...bindArr) {\n    // 如果是构造函数，那么this就是实例，那么通过instanceof 判断是true,是构造函数，否则就函数调用\n    // 处理返回值\n    return _self.apply(this instanceof fBound ? this : context, [...arr, ...bindArr])\n  }\n\n  // 返回的函数fBound继承一下当前调用函数的bar的原型\n  fBound.prototype = Object.create(_self.prototype)\n  // 等价于\n  // function f () {}\n  // f.prototype = _self.prototype\n  // fBound.prototype = new f()\n\n  return fBound\n}\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);