(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{271:function(a,s,e){"use strict";e.r(s);var t=e(0),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"什么是表达式语句？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是表达式语句？"}},[a._v("#")]),a._v(" 什么是表达式语句？")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("前言")]),a._v(" "),e("p",[a._v("它是由运算符连接变量或者直接量构成的\n要么是函数调用，要么是赋值，要么是自增、自减，否则表达式计算的结果没有任何意义")])]),a._v(" "),e("h2",{attrs:{id:"赋值表达式左边部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#赋值表达式左边部分"}},[a._v("#")]),a._v(" 赋值表达式左边部分")]),a._v(" "),e("h3",{attrs:{id:"primaryexpression-主要表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#primaryexpression-主要表达式"}},[a._v("#")]),a._v(" PrimaryExpression 主要表达式")]),a._v(" "),e("ul",[e("li",[a._v("包含了各种“直接量”")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('"abc";\n123;\nnull;\ntrue;\nfalse;\n')])])]),e("ul",[e("li",[a._v("定义对象，针对函数、类、数组、正则表达式等特殊对象类型")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("({});\n(function(){});\n(class{ });\n[];\n/abc/g;\n")])])]),e("ul",[e("li",[a._v("this 或者变量，在语法上，把变量称作“标识符引用”")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("this;\nmyVar;\n")])])]),e("h3",{attrs:{id:"memberexpression-成员表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#memberexpression-成员表达式"}},[a._v("#")]),a._v(" MemberExpression 成员表达式")]),a._v(" "),e("p",[a._v("通常是用于访问对象成员")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('a.b;\na["b"];\nnew.target; // 用于判断函数是否是被 new 调用\nsuper.b; // 用于访问父类的属性的语法\n')])])]),e("h3",{attrs:{id:"newexpression-new-表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#newexpression-new-表达式"}},[a._v("#")]),a._v(" NewExpression NEW 表达式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("new new Cls(1);\n等价于\nnew (new Cls(1));\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('\nclass Cls{\n  constructor(n){\n    console.log("cls", n);\n    return class {\n      constructor(n) {\n        console.log("returned", n);\n      }\n    }\n  }\n}\n\nnew (new Cls(1)); \n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("结果输出：\ncls 1\nreturned undefined\n")])])]),e("h3",{attrs:{id:"callexpression-函数调用表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#callexpression-函数调用表达式"}},[a._v("#")]),a._v(" CallExpression 函数调用表达式")]),a._v(" "),e("p",[a._v("它的基本形式是 Member Expression 后加一个括号里的参数列表")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("a.b(c);\nsuper();\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("a.b(c)(d)(e);\na.b(c)[3];\na.b(c).d;\na.b(c)`xyz`;\n")])])]),e("h3",{attrs:{id:"lefthandsideexpression-左值表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lefthandsideexpression-左值表达式"}},[a._v("#")]),a._v(" LeftHandSideExpression 左值表达式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("a() = b;\na().c = b;\n")])])]),e("h3",{attrs:{id:"assignmentexpression-赋值表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assignmentexpression-赋值表达式"}},[a._v("#")]),a._v(" AssignmentExpression 赋值表达式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("a = b\n\na = b = c = d\n等价于\na = (b = (c = d))\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("a += b;\n等价于\na = a + b;\n\n类似的\n*=、/=、%=、+=、-=、<<=、>>=、>>>=、&=、^=、|=、**=\n")])])]),e("h3",{attrs:{id:"逗号分隔的表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逗号分隔的表达式"}},[a._v("#")]),a._v(" 逗号分隔的表达式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("a = b, b = 1, null;\n")])])]),e("h2",{attrs:{id:"赋值表达式右边部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#赋值表达式右边部分"}},[a._v("#")]),a._v(" 赋值表达式右边部分")]),a._v(" "),e("h3",{attrs:{id:"更新表达式-updateexpression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新表达式-updateexpression"}},[a._v("#")]),a._v(" 更新表达式 UpdateExpression")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-- a;\n++ a;\na --\na ++\n")])])]),e("h3",{attrs:{id:"一元运算表达式-unaryexpression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一元运算表达式-unaryexpression"}},[a._v("#")]),a._v(" 一元运算表达式 UnaryExpression")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("delete a.b;\nvoid a;\ntypeof a;\n- a;\n~ a;\n! a;\nawait a;\n")])])]),e("h3",{attrs:{id:"乘方表达式-exponentiationexpression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#乘方表达式-exponentiationexpression"}},[a._v("#")]),a._v(" 乘方表达式 ExponentiationExpression")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("++i ** 30\n2 ** 30 //正确\n-2 ** 30 //报错\n\n4 ** 3 ** 2\n相当于\n4 ** (3 ** 2)\n")])])]),e("h3",{attrs:{id:"乘法表达式-multiplicativeexpression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#乘法表达式-multiplicativeexpression"}},[a._v("#")]),a._v(" 乘法表达式 MultiplicativeExpression")]),a._v(" "),e("p",[a._v("乘法表达式分别表示乘、除和取余")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("x * 2;\n*/%\n")])])]),e("h3",{attrs:{id:"加法表达式-additiveexpression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加法表达式-additiveexpression"}},[a._v("#")]),a._v(" 加法表达式 AdditiveExpression")]),a._v(" "),e("p",[a._v("加法表达式有加号和减号两种运算符")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("\n+ \n-\n")])])]),e("h3",{attrs:{id:"移位表达式-shiftexpression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移位表达式-shiftexpression"}},[a._v("#")]),a._v(" 移位表达式 ShiftExpression")]),a._v(" "),e("p",[a._v("二进制操作整数并不能提高性能, 仅仅是照顾 C 系语言用户的习惯")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("<< 向左移位\n>> 向右移位\n>>> 无符号向右移位\n")])])]),e("h3",{attrs:{id:"关系表达式-relationalexpression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关系表达式-relationalexpression"}},[a._v("#")]),a._v(" 关系表达式 RelationalExpression")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("<=\n>=\n<\n>\ninstanceof \nin\n")])])]),e("p",[a._v("需要注意，这里的 <= 和 >= 关系运算，完全是针对数字的，所以 <= 并"),e("strong",[a._v("不等价于")]),a._v(" < 或 ==。例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("\nnull <= undefined\n//false\nnull == undefined\n//true\n")])])]),e("h3",{attrs:{id:"相等表达式-equalityexpression-重点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相等表达式-equalityexpression-重点"}},[a._v("#")]),a._v(" 相等表达式 EqualityExpression(重点)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("== // 设计失误\n!=\n===\n!==\n")])])]),e("h4",{attrs:{id:"类型不同的变量比较时-运算只有三条规则："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型不同的变量比较时-运算只有三条规则："}},[a._v("#")]),a._v(" 类型不同的变量比较时==运算只有三条规则：")]),a._v(" "),e("ul",[e("li",[a._v("undefined 与 null 相等；")]),a._v(" "),e("li",[a._v("字符串和 bool 都转为数字再比较；")]),a._v(" "),e("li",[a._v("对象转换成 primitive 类型再比较")])]),a._v(" "),e("p",[a._v("比如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("false == '0' // true\ntrue == 'true' // false\n[] == 0  //true \n[] == false //true\nnew Boolean('false') == false // false\n")])])]),e("h3",{attrs:{id:"位运算表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位运算表达式"}},[a._v("#")]),a._v(" 位运算表达式")]),a._v(" "),e("ul",[e("li",[a._v("按位与表达式 BitwiseANDExpression")]),a._v(" "),e("li",[a._v("按位异或表达式 BitwiseANDExpression")]),a._v(" "),e("li",[a._v("按位或表达式 BitwiseORExpression。")])]),a._v(" "),e("h3",{attrs:{id:"逻辑与表达式和逻辑或表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逻辑与表达式和逻辑或表达式"}},[a._v("#")]),a._v(" 逻辑与表达式和逻辑或表达式")]),a._v(" "),e("h3",{attrs:{id:"条件表达式-conditionalexpression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件表达式-conditionalexpression"}},[a._v("#")]),a._v(" 条件表达式 ConditionalExpression")]),a._v(" "),e("h3",{attrs:{id:"优先级由高到低："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优先级由高到低："}},[a._v("#")]),a._v(" 优先级由高到低：")]),a._v(" "),e("p",[a._v("MDN 参考网址 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence")])])}),[],!1,null,null,null);s.default=r.exports}}]);