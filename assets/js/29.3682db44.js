(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{267:function(n,t,e){"use strict";e.r(t);var s=e(0),a=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"【好文】设计模式-创建设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#【好文】设计模式-创建设计模式"}},[n._v("#")]),n._v(" 【好文】设计模式(创建设计模式)")]),n._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[n._v("概念")]),n._v(" "),e("p",[n._v("设计模式 (Design Pattern) 是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结")])]),n._v(" "),e("p",[n._v("任何事情都有套路，"),e("code",[n._v("设计模式")]),n._v("就是写代码中常见的套路，有些写法我们日常都在使用，下面我们来介绍一下")]),n._v(" "),e("p",[e("strong",[n._v("创建设计模式")]),n._v("：工厂，单例、建造者、原型")]),n._v(" "),e("p",[e("strong",[n._v("结构化设计模式")]),n._v("：外观，适配器，代理，装饰器，享元，桥接，组合")]),n._v(" "),e("p",[e("strong",[n._v("行为型模式")]),n._v("：策略、模板方法、观察者、迭代器、责任链、命令、备忘录、状态、访问者、终结者、解释器")]),n._v(" "),e("h2",{attrs:{id:"单例模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[n._v("#")]),n._v(" 单例模式")]),n._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[n._v("定义")]),n._v(" "),e("p",[n._v("单例模式的定义："),e("code",[n._v("保证一个类仅有一个实例")]),n._v("，并提供一个访问它的全局访问点。实现的方法为"),e("code",[n._v("先判断实例存在与否")]),n._v("，如果存在则直接返回，否则就创建实例再返回，这就"),e("code",[n._v("保证了一个类只实例化一次")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("class Singleton {\n  constructor() {}\n}\n\nSingleton.getInstance = (function() {\n  let instance\n  return function() {\n    // 判断是否有存在的实例，如果没有就创建实例，否则就返回存在的实例\n    if (!instance) {\n      instance = new Singleton()\n    }\n    // 闭包的作用导致instance存在于内存中\n    return instance\n  }\n})()\n\nlet s1 = Singleton.getInstance()\nlet s2 = Singleton.getInstance()\nconsole.log(s1 === s2) // true\n\n")])])]),e("h2",{attrs:{id:"工厂模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[n._v("#")]),n._v(" 工厂模式")]),n._v(" "),e("p",[n._v("工厂模式的定义："),e("strong",[n._v("提供创建对象的接口")]),n._v("，把成员对象的创建工作转交给一个外部对象，好处就是"),e("strong",[n._v("消除对象直接的耦合")]),n._v("（也就是相互影响）")]),n._v(" "),e("p",[n._v("常见的栗子，我们的弹窗message，对外部提供API，都是调用API，然后新建一个弹窗或者message的实例，就是典型的工程模式")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("class Man {\n  constructor(name) {\n    this.name = name\n  }\n  say(){\n      console.log(`我的名字 ` + this.name)\n  }\n}\nconst p = new Man('JavaScript')\np.say() // 我的名字 JavaScript\n")])])]),e("p",[n._v("当然工厂模式并不仅仅是用来 new 出实例\n可以想象一个场景。假设有一份很复杂的代码需要用户去调用，但是用户并"),e("strong",[n._v("不关心")]),n._v("这些复杂的代码，"),e("strong",[n._v("只需要你提供给我一个接口去调用")]),n._v("，用户只负责传递需要的参数，至于这些参数怎么使用，"),e("strong",[n._v("内部有什么逻辑是不关心")]),n._v("的，只需要你最后返回我一个实例。这个构造过程就是工厂")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('const Notification = function(options) {\n  if (Vue.prototype.$isServer) return;\n  options = options || {};\n  let userOnClose = options.onClose;\n  let id = "notification_" + seed++;\n  let postion = options.postion || "top-right";\n  options.onClose = function() {\n    Notification.close(id, userOnClose);\n  };\n\n  instance = new NotificationConstructor({\n    data: options\n  });\n  if(isVNode(options.message)){\n    instance.$slots.default = [options.message]\n    options.message = \'REPLACED_BY_VNODE\'\n  }\n  instance.id = id\n  instance.$mount()\n  document.body.appendChild(instance.$el)\n  instance.visible = true\n  instance.dom = instance.$el\n  instance.dom.style.zIndex = PopupManager.nextZIndex()\n  let verticalOffset = options.offset || 0\n  instances.filter(item => {\n    verticalOffset += item.$el.offsetHeight + 16\n  })\n  verticalOffset += 16\n  instance.verticalOffset = verticalOffset\n  instances.push(instance)\n  return instance\n\n};\n')])])]),e("p",[n._v("跟外观模式有点相似，都是无需在乎内部代码，但工厂模式一个是创建对象的设计模式（函数形式），外观另一个是对象包含各个函数")]),n._v(" "),e("h2",{attrs:{id:"建造者模式builder"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#建造者模式builder"}},[n._v("#")]),n._v(" 建造者模式Builder")]),n._v(" "),e("p",[n._v("建造者模式的定义：和工厂者模式相比，参与了"),e("strong",[n._v("更多创建过程或者更加复杂")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const Person = function(name, work){\n  // 创建应聘者缓存对象\n  let _person = new Human()\n\n  // 创建应聘者姓名解析对象\n  _person.name = new NamedNodeMap(name)\n\n  // 创建应聘者期望职位\n  _person.work = new Worker(work)\n\n  return _person\n}\nconst p = new Person('小明', 'Java')\nconsole.log(p)\n\n")])])]),e("h2",{attrs:{id:"原型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型模式"}},[n._v("#")]),n._v(" 原型模式")]),n._v(" "),e("p",[n._v("原型模式是"),e("strong",[n._v("创建一个共享的原型")]),n._v("，通过拷贝这个原型来创建新的类，用于创建重复的对象，带来性能上的提升")]),n._v(" "),e("h3",{attrs:{id:"方法一：使用-object-create-prototype-optionaldescriptorobjects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法一：使用-object-create-prototype-optionaldescriptorobjects"}},[n._v("#")]),n._v(" 方法一：使用 Object.create(prototype, optionalDescriptorObjects)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('var vehiclePrototype = {\n    model:"保时捷",\n    getModel: function () {\n        console.log(\'车辆模具是：\' + this.model);\n    }\n};\n\nvar vehicle = Object.create(vehiclePrototype,{\n    "model":{\n        value:"法拉利"\n    }\n});\n\nvehicle.getModel();\n')])])]),e("h3",{attrs:{id:"方法二：使用-prototype"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法二：使用-prototype"}},[n._v("#")]),n._v(" 方法二：使用 prototype")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var vehiclePrototype = {\n    init: function (carModel) {\n        this.model = carModel || \"保时捷\";\n    },\n    getModel: function () {\n        console.log('车辆模具是：' + this.model);\n    }\n\n};\n\nfunction vehicle(model) {\n    function F() { };\n    F.prototype = vehiclePrototype;    \n    var f = new F();\n    f.init(model);\n    return f;\n}\nvar car = vehicle('法拉利');\ncar.getModel();\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);