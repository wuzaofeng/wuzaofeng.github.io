(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{233:function(t,e,n){t.exports=n.p+"assets/img/q1.8e42c3dd.jpg"},283:function(t,e,n){"use strict";n.r(e);var s=n(0),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"耗时一年整理，全网最全的typescript踩坑集锦-tsconfig-json-常用配置项注释以及问题）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#耗时一年整理，全网最全的typescript踩坑集锦-tsconfig-json-常用配置项注释以及问题）"}},[t._v("#")]),t._v(" 耗时一年整理，全网最全的TypeScript踩坑集锦(tsconfig.json 常用配置项注释以及问题）")]),t._v(" "),s("h2",{attrs:{id:"tsconfig-json-常用配置项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tsconfig-json-常用配置项"}},[t._v("#")]),t._v(" "),s("code",[t._v("tsconfig.json")]),t._v(" 常用配置项")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n    "compilerOptions": {\n\n        /**************基础配置**************/\n        /**************基础配置**************/\n        /**************基础配置**************/\n\n        /* 开启增量编译：TS 编译器在第一次编译的时候，会生成一个存储编译信息的文件，下一次编译的时候，会根据这个文件进行增量的编译，以此提高 TS 的编译速度 */\n        // "incremental": true,\n        /* 指定存储增量编译信息的文件位置 */\n        // "tsBuildInfoFile": "./",\n\n        /* 打印诊断信息 */\n        // "diagnostics": true,\n        /* 打印输出的文件 */\n        // "listEmittedFiles": true,\n        /* 打印编译的文件（包括引用的声明文件）*/\n        // "listFiles": true,\n\n        /* 指定 ECMAScript 的目标版本: \'ES3\' (default), \'ES5\', \'ES2015\', \'ES2016\', \'ES2017\', \'ES2018\', \'ES2019\' or \'ESNEXT\'. */\n        // "target": "es5",\n        /* 指定模块代码的生成方式: \'none\', \'commonjs\', \'amd\', \'system\', \'umd\', \'es2015\', or \'ESNext\'. */\n        // "module": "commonjs",\n\n        /* 指定要包含在编译中的库文件——引用类库——即申明文件，如果输出的模块方式是 es5，就会默认引入 "dom","es5","scripthost"  */\n        /* 如果在 TS 中想要使用一些 ES6 以上版本的语法，就需要引入相关的类库 */\n        // "lib": [],\n\n        /* 允许编译 JS 文件 */\n        // "allowJs": true,\n        /* 检查 JS 文件*/\n        // "checkJs": true,\n\n        /* 指定 JSX 代码生成的模式: \'preserve\', \'react-native\', or \'react\'. */\n        /* \'react\' 模式下：TS 会直接把 jsx 编译成 js */\n        /* \'preserve\' 模式下：TS 不会把 jsx 编译成 js，会保留 jsx */\n        // "jsx": "preserve",\n\n\n        /**************声明文件相关配置**************/\n        /**************声明文件相关配置**************/\n        /**************声明文件相关配置**************/\n\n        /* 生成相应的类型声明文件 —— \'.d.ts\' */\n        // "declaration": true,\n        /* 声明文件的输出路径 */\n        // "declarationDir": "./d",\n        /* 只生成声明文件，不生成 JS */\n        // "emitDeclarationOnly": true,\n        /* 声明文件目录，默认 node_modules/@types */\n        // "typeRoots": [],\n        /* 要导入的声明文件包，默认导入上面声明文件目录下的所有声明文件 */\n        // "types": [],\n\n\n        /* 将多个相互依赖的文件合并并且把编译后的内容输出到一个文件里\n         * 可以用在产出 AMD 模块的场景中\n         * "module":"amd" 时，当一个模块引入了另外一个模块，编译的时候会把这两个模块的编译结果合并到一个文件中\n         */\n        // "outFile": "./",\n        /* 指定编译文件的输出目录 */\n        // "outDir": "./out",\n        /* 指定输入文件的根目录，用于控制输出目录的结构 */\n        // "rootDir": "./",\n\n        /* 启用项目编译 */\n        // "composite": true,\n\n        /*  输出的时候移除注释 */\n        // "removeComments": true,\n\n        /* 不输出文件 */\n        // "noEmit": true,\n        /* 发生错误时不输出文件 */\n        // "noEmitOnError": true,\n\n        /* 不生成 helper 函数，以前的话设置为 true 后，需要额外安装 ts-helpers */\n        /* 类似于 babel ，会给每个文件都生成 helper 函数，会使得最终编译后的包的体积变大 */\n        // "noEmitHelpers": true,\n        /* 现在可以通过 tslib（TS 内置的库）引入 helper 函数，！！！文件必须是模块 ！！！ */\n        /* 编译后自动引入 var tslib_1 = require("tslib") */\n        // "importHelpers": true,\n\n        /* 当目标是 ES5 或 ES3 的时候提供对 for-of、扩展运算符和解构赋值中对于迭代器的完整支持 */\n        // "downlevelIteration": true,\n\n        /* 把每一个文件转译成一个单独的模块 */\n        // "isolatedModules": true,\n\n\n        /**************严格检查配置**************/\n        /**************严格检查配置**************/\n        /**************严格检查配置**************/\n\n        /* 开启所有的严格检查配置 */\n        "strict": true,\n        /* 不允许使用隐式的 any 类型 */\n        // "noImplicitAny": true,\n\n        /* 不允许把 null、undefined 赋值给其他类型变量 */\n        // "strictNullChecks": true,\n\n        /* 不允许函数参数双向协变 */\n        // "strictFunctionTypes": true,\n\n        /* 使用 bind/call/apply 时，严格检查函数参数类型 */\n        // "strictBindCallApply": true,\n\n        /* 类的实例属性必须初始化 */\n        // "strictPropertyInitialization": true,\n\n        /* 不允许 this 有隐式的 any 类型，即 this 必须有明确的指向*/\n        // "noImplicitThis": true,\n\n        /* 在严格模式下解析并且向每个源文件中注入 "use strict" */\n        // "alwaysStrict": true,\n\n        /**************额外的语法检查配置，这种检查交给 eslint 就行，没必要配置**************/\n        /**************额外的语法检查配置，这种检查交给 eslint 就行，没必要配置**************/\n        /**************额外的语法检查配置，这种检查交给 eslint 就行，没必要配置**************/\n\n        /* 有未使用到的本地变量时报错 */\n        // "noUnusedLocals": true,\n\n        /* 有未使用到的函数参数时报错 */\n        // "noUnusedParameters": true,\n\n        /* 每个分支都要有返回值 */\n        // "noImplicitReturns": true,\n\n        /* 严格校验 switch-case 语法 */\n        // "noFallthroughCasesInSwitch": true,\n\n        /**************模块解析配置**************/\n        /**************模块解析配置**************/\n        /**************模块解析配置**************/\n\n        /* 指定模块的解析策略: \'node\' (Node.js) or \'classic\' (TypeScript pre-1.6)*/\n        /* 若未指定，那么在使用了 --module AMD | System | ES2015 时的默认值为 Classic，其它情况时则为 Node */\n        // "moduleResolution": "node",\n\n        /* 在解析非绝对路径模块名的时候的基准路径 */\n        // "baseUrl": "./",\n\n        /* 基于 \'baseUrl\' 的路径映射集合 */\n        // "paths": {},\n\n        /* 将多个目录放在一个虚拟目录下，用于运行时 */\n        /* 当自己编写的库和开发的代码都输出到一个目录下时，开发代码和库的位置不一样，开发代码引入库的路径就会不对 */\n        // "rootDirs": [],\n        // "rootDirs": ["src","out"],\n\n        /* 允许 export = xxx 导出 ，并使用 import xxx form "module-name" 导入*/\n        // "esModuleInterop": true,\n\n        /* 当模块没有默认导出的时候，允许被别的模块默认导入，这个在代码执行的时候没有作用，只是在类型检查的时候生效 */\n        // "allowSyntheticDefaultImports": true,\n\n\n        /* 不要 symlinks 解析的真正路径 */\n        // "preserveSymlinks": true,\n\n        /* 允许在模块中以全局变量的方式访问 UMD 模块内容 */\n        // "allowUmdGlobalAccess": true,\n\n\n        /************** Source Map 配置**************/\n        /************** Source Map 配置**************/\n        /************** Source Map 配置**************/\n\n        /* 指定 ts 文件位置 */\n        // "sourceRoot": "",\n\n        /* 指定 map 文件存放的位置 */\n        // "mapRoot": "",\n\n        /* 生成目标文件的 sourceMap */\n        // "sourceMap": true,\n\n        /* 将代码与sourcemaps生成到一个文件中，要求同时设置了--inlineSourceMap 或--sourceMap 属性*/\n        // "inlineSources": true,\n\n        /* 生成目标文件的 inline sourceMap —— 源文件和 sourcemap 文件在同一文件中，而不是把 map 文件放在一个单独的文件里*/\n        // "inlineSourceMap": true,\n\n        /* 生成声明文件的 sourceMap */\n        // "declarationMap": true,\n\n        /************** 实验性的配置**************/\n        /************** 实验性的配置**************/\n        /************** 实验性的配置**************/\n\n        /* 启用装饰器 */\n        // "experimentalDecorators": true,\n\n        // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */\n\n\n        /**************高级配置**************/\n        /**************高级配置**************/\n        /**************高级配置**************/\n\n        /* 强制区分大小写 */\n        // "forceConsistentCasingInFileNames": true\n\n}\n\n    /* 指定需要编译的单个文件列表 */\n    // "files": [],\n\n    /* 指定需要编译的文件/目录 */\n    // "include": [\n    //    // 只写一个目录名等价于 "./src/**/*"\n    //    "src"\n    //  ]\n\n    /* 需要排除的文件或目录 */\n    // "exclude": []\n\n    /* 配置文件继承 */\n    // "extends": "./tsconfig.base.json"\n\n}\n')])])]),s("h2",{attrs:{id:"tsconfig-json-配置项问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tsconfig-json-配置项问题"}},[t._v("#")]),t._v(" "),s("code",[t._v("tsconfig.json")]),t._v(" 配置项问题")]),t._v(" "),s("h3",{attrs:{id:"_1-三种-jsx-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-三种-jsx-模式"}},[t._v("#")]),t._v(" 1. 三种 "),s("code",[t._v("JSX")]),t._v(" 模式")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在 TS 中想要使用 "),s("code",[t._v("JSX")]),t._v(" 必须做两件事")]),t._v(" "),s("ol",[s("li",[t._v("给文件一个 "),s("code",[t._v(".tsx")]),t._v(" 扩展名")]),t._v(" "),s("li",[t._v("启用 "),s("code",[t._v("jsx")]),t._v(" 选项\nTS 具有三种 JSX 模式："),s("code",[t._v("preserve")]),t._v("，"),s("code",[t._v("react")]),t._v(" 和 "),s("code",[t._v("react-native")]),t._v("，这些模式只在代码生成阶段起作用，类型检查并不受影响")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("preserve 模式下：")]),t._v(" 不会将 JSX 编译成 JS，生成代码中会保留 JSX，以供后续的转换操作使用（比如：Babel）。 另外，输出文件会带有 .jsx 扩展名")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("react 模式下：")]),t._v(" 直接将 JSX 编译成 JS，会生成 React.createElement 的形式，在使用前不需要再进行转换操作了，输出文件的扩展名为 .js")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("react-native 模式下：")]),t._v(" 相当于 preserve，它也保留了所有的 JSX，但是输出文件的扩展名是 .js。")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("模式")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("输入")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("输出")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("输出文件扩展名")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("preserve")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("<div />")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("<div />")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v(".jsx")])]),t._v(" "),s("tr",[s("td",[t._v("react")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("<div />")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v('React.createElement("div")')])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v(".js")])]),t._v(" "),s("tr",[s("td",[t._v("react-native")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("<div />")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("<div />")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v(".js")])])])])])]),t._v(" "),s("h3",{attrs:{id:"_2-lib-配置项需要注意的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-lib-配置项需要注意的问题"}},[t._v("#")]),t._v(' 2. "lib" 配置项需要注意的问题')]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当你安装 "),s("code",[t._v("TypeScript")]),t._v(" 时，会顺带安装 "),s("code",[t._v("lib.d.ts")]),t._v(" 等声明文件，"),s("strong",[t._v("此文件包含了 "),s("code",[t._v("JavaScript")]),t._v(" 运行时以及 "),s("code",[t._v("DOM")]),t._v(" 中存在各种常见的环境声明")])])]),t._v(" "),s("li",[s("p",[t._v("它"),s("strong",[t._v("自动")]),t._v("包含在 TypeScript 项目的编译上下文中")])]),t._v(" "),s("li",[s("p",[t._v("它能让你"),s("strong",[t._v("快速开始书写")]),t._v("经过类型检查的 JavaScript 代码")])]),t._v(" "),s("li",[s("p",[t._v("tsconfig.json 中的 lib 选项用来指定当前项目需要注入"),s("strong",[t._v("哪些声明库")]),t._v("文件。如果没有指定，默认注入的库文件列表为")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当 "),s("code",[t._v("--target ES5：DOM,ES5,ScriptHost")])])]),t._v(" "),s("li",[s("p",[t._v("当 "),s("code",[t._v("--target ES6：DOM,ES6,DOM.Iterable,ScriptHost")])])])])]),t._v(" "),s("li",[s("p",[t._v("如果在 TS 中想要使用一些 ES6 以上版本或者特殊的语法，就需要引入相关的类库。如：\n"),s("code",[t._v("ES7")]),t._v(" "),s("code",[t._v("DOM.Iterable")])])])]),t._v(" "),s("h3",{attrs:{id:"_3-moduleresolution-解析策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-moduleresolution-解析策略"}},[t._v("#")]),t._v(' 3. "moduleResolution" 解析策略')]),t._v(" "),s("p",[t._v("https://www.tslang.cn/docs/handbook/module-resolution.html")]),t._v(" "),s("h3",{attrs:{id:"_4-指定-target-为-es6-时，tsc-就会默认使用-classic-模块解析策略，这个策略对于-import-as-abc-from-babel-types-这种非相对路径的导入，不能正确解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-指定-target-为-es6-时，tsc-就会默认使用-classic-模块解析策略，这个策略对于-import-as-abc-from-babel-types-这种非相对路径的导入，不能正确解析"}},[t._v("#")]),t._v(' 4. 指定 target 为 es6 时，tsc 就会默认使用 "classic" 模块解析策略，这个策略对于 '),s("code",[t._v('import * as abc from "@babel/types"')]),t._v(" 这种非相对路径的导入，不能正确解析")]),t._v(" "),s("p",[t._v('解决方法：指定解析策略为 node => "moduleResolution": "node"')]),t._v(" "),s("h3",{attrs:{id:"_5-esmoduleinterop-具体作用是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-esmoduleinterop-具体作用是什么"}},[t._v("#")]),t._v(' 5. "esModuleInterop" 具体作用是什么')]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果一个模块遵循 ES6 模块规范，当默认导出内容时（export default xxx），ES6 模块系统会自动给当前模块的顶层对象加上一个 default 属性，指向导出的内容。当一个 ES6 模块引入该模块时（import moduleName from 'xxx'），ES6 模块系统默认会自动去该模块中的顶层对象上查找 default 属性并将值赋值给 moduleName。而如果一个非 ES6 规范的模块引入 ES6 模块直接使用时（var moduleName = require('xxx')），就会报错，需要通过  moduleName.default 来使用")])]),t._v(" "),s("li",[s("p",[t._v("TypeScript 为了兼容，"),s("strong",[t._v("引入了 esModuleInterop 选项，设置 esModuleInterop 为 true ，在编译时自动给该模块添加 default 属性，就可以通过 import moduleName from 'xxx' 的形式导入 非 ES6 模块，不再需要使用 import moduleName = require('xxx') 的形式")])])])]),t._v(" "),s("h3",{attrs:{id:"_6-allowsyntheticdefaultimports-具体作用是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-allowsyntheticdefaultimports-具体作用是什么"}},[t._v("#")]),t._v(' 6. "allowSyntheticDefaultImports" 具体作用是什么')]),t._v(" "),s("p",[s("strong",[t._v("允许 默认导入 没有设置默认导出（export default xxx）的模块，可以以 import xxx from 'xxx' 的形式来引入模块")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 配置前\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\n// 配置后\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n")])])]),s("h3",{attrs:{id:"_7-paths-配置路径映射集合时，需要注意的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-paths-配置路径映射集合时，需要注意的问题"}},[t._v("#")]),t._v(' 7. "paths" 配置路径映射集合时，需要注意的问题')]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n   "paths": {\n      // 这里的路径后面必须跟着 "/*"\n      "@public/*": [\n        // 这里的路径后面必须跟着 "/*"\n        "public/*"\n      ],\n      "@src/*": [\n        "src/*"\n      ],\n      "@assets/*":[\n        "src/assets/*"\n      ],\n      "@components/*": [\n        "src/components/*"\n      ]\n    }\n}\n')])])]),s("h3",{attrs:{id:"_8-allowjs-时需要注意的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-allowjs-时需要注意的问题"}},[t._v("#")]),t._v(' 8. "allowJs" 时需要注意的问题')]),t._v(" "),s("p",[s("strong",[t._v('设置 "allowJs": false ：在 .ts / .tsx 文件中引入 .js / .jsx 文件时，就不会有相关提示')]),t._v(" "),s("img",{attrs:{src:n(233),alt:"q1"}})]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("涉及链接")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.tslang.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("typescript中文版"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);